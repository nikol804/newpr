from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required

from django.http import JsonResponse
from django.views.decorators.http import require_http_methods
from django.db.models import Q
from .models import User, Interest
from django.db import transaction
from .forms import SignUpForm, LoginForm, ProfileUpdateForm, TestForm
import json


def auth_view(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if request.user.is_authenticated:
        next_url = request.GET.get('next')
        return redirect(next_url or 'profile')
    
    login_form = LoginForm()
    signup_form = SignUpForm()
    
    if request.method == 'POST':
        if 'login' in request.POST:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
            login_form = LoginForm(request, data=request.POST)
            if login_form.is_valid():
                identifier = login_form.cleaned_data.get('username')
                password = login_form.cleaned_data.get('password')
                remember = login_form.cleaned_data.get('remember_me')
                # –ü—Ä–æ–±—É–µ–º —Ç–∞–∫–∂–µ trim –ø—Ä–æ–±–µ–ª—ã
                user = authenticate(request, username=(identifier or '').strip(), password=(password or ''))
                if user is not None:
                    login(request, user)
                    if remember:
                        # 2 –Ω–µ–¥–µ–ª–∏
                        request.session.set_expiry(60 * 60 * 24 * 14)
                    else:
                        # –î–æ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
                        request.session.set_expiry(0)
                    return redirect(request.GET.get('next') or 'profile')
                else:
                    login_form.add_error(None, '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
        
        elif 'signup' in request.POST:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            signup_form = SignUpForm(request.POST)
            if signup_form.is_valid():
                user = signup_form.save()
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user.backend = 'django.contrib.auth.backends.ModelBackend'
                login(request, user)
                return redirect('profile')
    
    context = {
        'login_form': login_form,
        'signup_form': signup_form,
    }
    return render(request, 'main/auth.html', context)


@login_required
def profile_view(request):
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = User.objects.prefetch_related('interests').get(pk=request.user.pk)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    form = ProfileUpdateForm(instance=user)
    test_form = TestForm(instance=user)
    
    # –û—Ç–ª–∞–¥–∫–∞ - –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: q1={user.question1}, q2={user.question2}, q3={user.question3}, q4={user.question4}, q5={user.question5}")
    print(f"–û–±—â–∏–π –±–∞–ª–ª: {user.test_score}")
    
    if request.method == 'POST':
        if 'update_interests' in request.POST:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            form = ProfileUpdateForm(request.POST, instance=user)
            if form.is_valid():
                form.save()
                return redirect('profile')
        
        elif 'update_test' in request.POST:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            test_form = TestForm(request.POST, instance=user)
            if test_form.is_valid():
                test_form.save()
                user.calculate_test_score()
                user.save()
                return redirect('profile')
            else:
                pass  # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã
    
    context = {
        'user': user,
        'form': form,
        'test_form': test_form,
        'test_score': user.test_score,
    }
    return render(request, 'main/profile.html', context)


@login_required
def search_view(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    user = request.user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ç–µ—Ä–µ—Å—ã
    if not user.interests.exists():
        return redirect('profile')
    
    context = {
        'user': user,
    }
    return render(request, 'main/search.html', context)


@login_required
@require_http_methods(["POST"])
def find_match(request):
    """AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    user = request.user
    
    # –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∏—â—É—â–µ–≥–æ
    user.is_searching = True
    user.save()
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –≥–æ–Ω–æ–∫
    match = None
    with transaction.atomic():
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –∏ –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        user.refresh_from_db()
        match = user.find_match()
    
    if match:
        # –£–±–∏—Ä–∞–µ–º –æ–±–æ–∏—Ö –∏–∑ –ø–æ–∏—Å–∫–∞
        user.is_searching = False
        user.save()
        match.is_searching = False
        match.save()
        
        return JsonResponse({
            'status': 'success',
            'user_id': match.id,
            'match_username': match.username,
            'match_interests': list(match.interests.values_list('name', flat=True)),
            'match_social_url': match.social_url,
        })
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–∏—Å–∫–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    return JsonResponse({
        'status': 'no_match',
        'message': '–ü–æ–¥—Ö–æ–¥—è—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!'
    })











@login_required
def logout_view(request):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    logout(request)
    return redirect('auth')


@login_required
def user_profile_view(request, user_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    other_user = get_object_or_404(User, id=user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    if request.user == other_user:
        return redirect('profile')
    
    context = {
        'other_user': other_user,
    }
    return render(request, 'main/user_profile.html', context)


@login_required
@require_http_methods(["POST"])
def update_test_scores(request):
    """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON; –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π dict
        try:
            data = json.loads(request.body or b"{}")
        except json.JSONDecodeError:
            data = {}
        user = request.user
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–ª—é—á–∏ q1..q5 –∏ question1..question5,
        # –∞ —Ç–∞–∫–∂–µ form-encoded –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ request.POST)
        def pick_value(i: int):
            keys = [f"q{i}", f"question{i}"]
            for k in keys:
                if isinstance(data, dict) and k in data and data[k] is not None:
                    return data[k]
            for k in keys:
                if k in request.POST and request.POST.get(k):
                    return request.POST.get(k)
            return None

        q1 = pick_value(1)
        q2 = pick_value(2)
        q3 = pick_value(3)
        q4 = pick_value(4)
        q5 = pick_value(5)

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º–∏ 1..5). –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        def validate_optional(val, name):
            if val is None or val == "":
                return None
            try:
                ival = int(val)
            except (TypeError, ValueError):
                raise ValueError(f"{name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
            if ival < 1 or ival > 5:
                raise ValueError(f"{name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
            return ival

        q1 = validate_optional(q1, 'q1')
        q2 = validate_optional(q2, 'q2')
        q3 = validate_optional(q3, 'q3')
        q4 = validate_optional(q4, 'q4')
        q5 = validate_optional(q5, 'q5')
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: q1={q1}, q2={q2}, q3={q3}, q4={q4}, q5={q5}")
        print(f"üìä –°—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: q1={user.question1}, q2={user.question2}, q3={user.question3}, q4={user.question4}, q5={user.question5}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
        new_score = user.update_test_scores(q1=q1, q2=q2, q3=q3, q4=q4, q5=q5)
        
        print(f"üìä –ù–æ–≤—ã–π –æ–±—â–∏–π –±–∞–ª–ª: {new_score}")
        print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: q1={user.question1}, q2={user.question2}, q3={user.question3}, q4={user.question4}, q5={user.question5}")
        
        return JsonResponse({
            'status': 'success',
            'message': '–ë–∞–ª–ª—ã —Ç–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'new_score': new_score,
            'q1': user.question1,
            'q2': user.question2,
            'q3': user.question3,
            'q4': user.question4,
            'q5': user.question5,
        })
        
    
    except ValueError as e:
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        }, status=400)
    except Exception as e:
        return JsonResponse({
            'status': 'error',
            'message': f'–û—à–∏–±–∫–∞: {str(e)}'
        }, status=500)


def index_view(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç"""
    if request.user.is_authenticated:
        return redirect('profile')
    return redirect('auth')
