from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.validators import MinValueValidator, MaxValueValidator


class Interest(models.Model):
    """–ú–æ–¥–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    name = models.CharField(max_length=100, unique=True, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    icon = models.CharField(max_length=50, default='fa-star', verbose_name='–ò–∫–æ–Ω–∫–∞ FontAwesome')
    
    def __str__(self):
        return self.name
    
    class Meta:
        verbose_name = '–ò–Ω—Ç–µ—Ä–µ—Å'
        verbose_name_plural = '–ò–Ω—Ç–µ—Ä–µ—Å—ã'
        ordering = ['name']


class User(AbstractUser):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username = models.CharField(max_length=150, unique=True, verbose_name='–ù–∏–∫–Ω–µ–π–º')
    email = models.EmailField(unique=True, verbose_name='Email')
    social_url = models.URLField(blank=True, null=True, verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü—Å–µ—Ç—å (VK –∏ –¥—Ä.)')
    
    USERNAME_FIELD = 'username'
    REQUIRED_FIELDS = ['email']
    interests = models.ManyToManyField(Interest, blank=True, related_name='users', verbose_name='–ò–Ω—Ç–µ—Ä–µ—Å—ã')
    test_score = models.IntegerField(default=0, verbose_name='–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞')
    is_searching = models.BooleanField(default=False, verbose_name='–í –ø–æ–∏—Å–∫–µ')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    
    # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç - 5 –≤–æ–ø—Ä–æ—Å–æ–≤
    question1 = models.IntegerField(
        default=3,
        validators=[MinValueValidator(1), MaxValueValidator(5)],
        verbose_name='–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –æ–±—â–∏—Ç–µ–ª—å–Ω—ã?'
    )
    question2 = models.IntegerField(
        default=3,
        validators=[MinValueValidator(1), MaxValueValidator(5)],
        verbose_name='–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Ç–∫—Ä—ã—Ç—ã –Ω–æ–≤–æ–º—É –æ–ø—ã—Ç—É?'
    )
    question3 = models.IntegerField(
        default=3,
        validators=[MinValueValidator(1), MaxValueValidator(5)],
        verbose_name='–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã?'
    )
    question4 = models.IntegerField(
        default=3,
        validators=[MinValueValidator(1), MaxValueValidator(5)],
        verbose_name='–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã?'
    )
    question5 = models.IntegerField(
        default=3,
        validators=[MinValueValidator(1), MaxValueValidator(5)],
        verbose_name='–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã?'
    )
    
    def calculate_test_score(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª —Ç–µ—Å—Ç–∞"""
        self.test_score = self.question1 + self.question2 + self.question3 + self.question4 + self.question5
        return self.test_score
    
    def update_test_scores(self, q1=None, q2=None, q3=None, q4=None, q5=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–ª—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        print(f"üîß update_test_scores –≤—ã–∑–≤–∞–Ω —Å: q1={q1}, q2={q2}, q3={q3}, q4={q4}, q5={q5}")
        
        if q1 is not None:
            self.question1 = q1
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω q1: {q1}")
        if q2 is not None:
            self.question2 = q2
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω q2: {q2}")
        if q3 is not None:
            self.question3 = q3
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω q3: {q3}")
        if q4 is not None:
            self.question4 = q4
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω q4: {q4}")
        if q5 is not None:
            self.question5 = q5
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω q5: {q5}")
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–ª
        old_score = self.test_score
        self.calculate_test_score()
        print(f"üî¢ –ë–∞–ª–ª –∏–∑–º–µ–Ω–∏–ª—Å—è —Å {old_score} –Ω–∞ {self.test_score}")
        
        self.save()
        return self.test_score
    
    def save(self, *args, **kwargs):
        self.calculate_test_score()
        super().save(*args, **kwargs)
    
    def find_match(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
        from django.db.models import Count, Q
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–±—è –∏ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –≤ –ø–æ–∏—Å–∫–µ
        potential_matches = User.objects.exclude(id=self.id).filter(is_searching=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º (–º–∏–Ω–∏–º—É–º 3 –æ–±—â–∏—Ö)
        my_interests = self.interests.all()
        if my_interests:
            potential_matches = potential_matches.filter(
                interests__in=my_interests
            ).annotate(
                common_interests=Count('interests', distinct=True)
            ).filter(common_interests__gte=3)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞ (—Ä–∞–∑–Ω–∏—Ü–∞ –Ω–µ –±–æ–ª–µ–µ 10 –±–∞–ª–ª–æ–≤)
        min_score = self.test_score - 10
        max_score = self.test_score + 10
        potential_matches = potential_matches.filter(
            test_score__gte=min_score,
            test_score__lte=max_score
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ
        return potential_matches.first()
    
    def __str__(self):
        return self.username
    
    class Meta:
        verbose_name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        verbose_name_plural = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'



